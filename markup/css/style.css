/* 
・セレクター
基本セレクター
使いどころや使い分けなど

次回以降
グループ化セレクター
結合子
ドキュメントツリー（構造）
*/

/*
基本セレクター

【全称セレクター（ユニバーサルセレクター）】
全ての要素型セレクター（タイプセレクター）と一致する */
* {
  color: red;
}

/*【要素型セレクター（タイプセレクター）】
/* h1, p, span, body, button, ...など要素名(ノード名)で指定する */
h1 {
  color: red;
}
p { color: red; }

/* 【クラスセレクター】 */
/* 要素のclass属性を指定する */
.title {
  color: red;
}

/* 【IDセレクター】 */
/* 要素のid属性を指定する */
#header {
  color: red;
}

/* 【属性セレクター】 */
/* 属性が存在するかどうかや、その値に基づいて要素を指定する */
a[target="_blank"] {
	color: red;
}

/* 【疑似表記（疑似クラス、擬似要素）】 */
/* 疑似クラス */
a:hover {
  color: red;
}
/* 疑似要素 */
a::after {
  content: '→';
}

/*
【使いどころ、使い分け】
ユニバーサルセレクター *

1. デフォルトのスタイル（ブラウザ）を一括でリセットするとき
スタイルがなくても
*/
* {
  margin: 0;
  padding: 0;
  font-size: 62.5%; /* デフォルトのフォントサイズは16px */
  /* 16px x 62.5% = 10px */
  /* 16px → 18pxにしたい → 1.125rem */
  /* 10px → 18pxにしたい → 1.8rem */
}

/* 2. または全体で共通のスタイルをあてたいとき
例：背景画像は全要素共通で繰り返さないようにしたい */
* {
  background-repeat: no-repeat;  
}
.logo {
  background-image: url('images/logo.png');
}

/* form関連の要素にはfont-familyが継承されないため */
* {
  margin: 0;
  padding: 0;
  font-size: 62.5%;
  font-family: inherit;
  background-repeat: no-repeat;
}

/*
3. 名前空間と共に使う（XML,XHTML,SVG)
異なるXML名前空間の要素が混在するXMLドキュメントにCSSを適用する。*/
@namespace url(http://www.example.com/foo);
@namespace svg url(http://www.example.com/2020/svg);

/* svg内の要素のみに共通スタイルをあてたい。 */
svg|* {
  /* スタイル */
}

/*
なぜそのような使われ方をするのか？
それにはどのような理由があるのか？

【ユニバーサルセレクターに関する知識】
ユニバーサルセレクターはパフォーマンスが低い。
だから使わない方がよいという情報を見かける。

これは実際どうなのか？
今のブラウザは速いので影響はごくわずかだと考えて良いと思います。
セレクターによるパフォーマンスは気にしなくてよい。

パフォーマンスに影響が大きい部分
・画像の容量が大きい
・JavaScriptの処理が複雑で重い
・API通信が遅い
など

ただし、おすすめしない使い方はある。

【豆知識】
ユニバーサルセレクターってあまりみない／頻繁に使わない。

ユニバーサルセレクターは省略されているだけの場合が結構ある。
/* クラスセレクター  */
.title {
  color: red;
} 
*.title {
  color: red;
}
/*
と全く同じ

div.title { ... }
h1.title { ... }
p.title { ... }
...
など、全てのタイプセレクターと一致する

.title .title-sub { ... }
*.title *.title-sub { ... }

[title="sample"] { ... }
*[title="sample"] { ... }
も同じ。

【ブラウザーはセレクターを「右から左」に評価する】

おすすめしない書き方
・主要なセレクターの部分に使う
*/
/* おすすめしない */
/* .box * {
  color: black;
} */
/* 問題なし */
/* .box .box-item {
  color: black;
} */
* .box {
  color: black;
}
/*
ドキュメント内の全ての要素を照合する。
先祖要素にboxがあるかどうかを全ての要素に対して検査する必要がある。
*を含むセレクターが複雑になればなるほど影響が大きくなる

Webサイトの規模にもよる
3Dをはじめとしたグラフィックのエフェクト系

HTMLの構造やマークアップの仕方がおかしい
セレクターの宣言に無駄がありそう（セレクターに関する知識が少ない）
*/
div > ul li > a { color: red; }
div a [type="text"] .box .title { color: red; }

/* 意図していない要素にスタイルが適用されてしまう */
.box .title {
  font-size: 1.2rem;
  color: black;
}

/*
まとめ・結論

セレクターによるパフォーマンスは気にしなくて良い。
パフォーマンスより保守性を考えた方が良い。（HTMLの構造とかCSS設計）
意図していない要素にスタイルが適用されてしまう可能性がある。

1. デフォルトのスタイル（ブラウザ）を一括でリセットしたいとき
2. 全体で共通のスタイルをあてたいとき
*は限定的に利用した方が良さそう。

*/

/*
【IDセレクターとクラスセレクターの使いどころ、使い分け】
スタイルは基本的にクラスセレクター(class属性)を使ってコーディングする。
スタイルでIDセレクターはおすすめできない。

【なぜか？】
CSS設計
1. スタイルが再利用しづらくなるため
特定のコンテキストに依存してしまう
id属性は同一ページ内で同名は1つしか使えない。
*/
#blog {
  font-size: 1.1rem;
}
/*
2. スタイルの上書きがしづらくなるため
むやみに詳細度をあげてしまう
IDセレクターの方がクラスセレクターより詳細度が高い
無理やり「!important」で上書きするとさらに上書きしづらくなる。
*/
#blog {
  font-size: 1.1rem;
}
.blog {
  font-size: 1.2rem !important;
}

/* HTML要素のid属性を使う場合
1. ページ内リンクを設定する場合
<a href="#buy">購入へ</a>
↓
<section id="buy">購入はこちらから</section>

2. JavaScriptから利用する場合
<div id="todos">
  ...
</div>
<div id="app">
  ...
</div>

【スタイルでIDセレクターを使う場合を強いてあげるなら】
・改修や再設計などを安全に進めるために一時的に使う。
例：スタイル変更の影響範囲が予想しづらく、改修が困難な場合。
他の既存のページに影響が出ないようにIDセレクターで挟む
*/
.title {
  color: #333;
  /* その他たくさんの宣言
   ...
   ...
   ...
  */
}
#new_style .title {
  color: darkgray;
}
/*
改修していくページ(部分)に順番にid属性を付与して修正する。
IDセレクターの優先度が高いことを利用して名前空間として使う。
既存のページには影響を与えることなくスタイルをページごとに順番に改修できる。
終わったら#new_styleの部分を一括削除。

スタイルではIDセレクターは基本的に使わない。

【属性セレクターの使いどころ、使い分け】
指定された属性が存在するかどうかや、その値のパターンを指定できる

/* href属性の値が"https://example.com"であるa要素 */
a[href="https://example.com"] {
  color: red;
}

/* href属性の値が".pdf"で終わるa要素 */
a[href$=".pdf"] {
  color: red;
}

/* href属性の値が"https://"で始まるa要素 */
a[href^="https://"] {
  color: red;
}

/*
動的なコンテンツ（属性の有無、値が動的に変化する）
コンテンツの性質によってスタイルを変えたい場合

例
リンクの拡張子ごとにスタイルを変えたい
https://example.com/sample.html
https://example.com/sample.pdf

class属性やid属性が連番になっている場合
例
<a class="task-1">タスク1</a>
<a class="task-2">タスク2</a>
<a class="task-3　task--done">タスク3</a>
*/
a[class^="task-"] {
  color: red;
}
/*
意図せずパターンに一致してしまう可能性がある。 */
a[class^="ja"] {
  color: red;
}
/*
ルールを決めてCSSとJavaScriptでスタイルを切り分ける
<a id="app" class="task task--done">
<a class="task js-target">
<a class="task js-target">
<a class="task __target">

/*
【疑似表記の使いどころや使い分け】
疑似クラスと疑似要素に関しては使いどころや使い分けは特になさそう。
要素の状態（疑似クラス）や特定の部分（疑似要素）は一意。

疑似クラス：マウスでホバーされている状態（:hover)
疑似要素：1行目（::first-line）

※疑似クラスと疑似要素の概要や基本的な使い方については後日解説します。












/*
グループ化セレクター
カンマ「,」を使ってグループ化する
一致するすべてのノードを選択します。
*/
h1, h2, h3 {
  color: red;
} 
/*　共通のスタイルを一括で指定できる。*/
h1 {
  color: red;
}
h2 {
  color: red;
}
h3 {
  color: red;
}

/*
ただし注意点が1つある。
全てのセレクターが有効な場合に等価になる。
*/
h1, h2::marker, h3 {
  color: red;
}
/* 1つでもブラウザ非対応の構文が合った場合は全体が無効になる */

h1 {
  color: red;
}
h2::marker {
  color: red;
}
h3 {
  color: red;
}
h4 {
  color: red;
}
/*
ブラウザの対応、非対応がわかれるものに関しては個別で宣言した方が無難

【結合子】
結合子（コンビネーター）
・子孫結合子(スペース)
・子結合子(>)
・隣接兄弟結合子(+)
・一般兄弟結合子(~)

結合子は「セレクター」とも呼ばれる。「例：子孫セレクター」

【子孫結合子(スペース)】
セレクターの間に半角スペースを入れる。

※半角スペースがない場合
複数のクラスが適用された要素を選択する
.alert.info { ... }
○ <p class="alert info">お知らせ</p>
x <p class="alert">お知らせ</p>
x <p class="info">お知らせ</p>
結合子ではなくクラスセレクターに分類されているみたい。

【豆知識】
CSSでは基本的に「親要素」に関するセレクターや結合子はない
○ div > a { ... } // 子結合子
X 親要素（※イメージ）
x a < div { ... } // 親結合子といったものはない

X 親の兄弟要素
X 親の兄弟の子
同じ階層か下の階層に関するセレクター（子孫要素か兄弟要素）

一応、草案はある（Selectors Level 4　Working Draft）
:has()というrelational pseudo-class（意訳：関連疑似クラス）
で可能ではありそう。
まだどのブラウザーでも実装されていない。（2020/04/18現在）
実装されるかどうかもまだわからない。

親要素を選択する必要がある場合は、JavaScriptを使用する必要がある。
parentNode // 親要素を取得する
closest() // 最も近い先祖要素を取得する
*/
