/* 
・セレクター
一連のCSSの規則が適用される要素
どの要素にスタイルを適用するのか

セレクター {
  プロパティ: 値:
}

今回
基本セレクター
使いどころや使い分けなど

次回以降
グループ化セレクター
結合子
ドキュメントツリー（構造）
*/

/*
基本セレクター

【全称セレクター（ユニバーサルセレクター）】
全ての要素型セレクター（タイプセレクター）と一致する */
* {
  color: red;
}

/*【要素型セレクター（タイプセレクター）】
/* h1, p, span, body, button, ...など要素名(ノード名)で指定する */
h1 {
  color: red;
}
p { color: red; }

/* 【クラスセレクター】 */
/* 要素のclass属性で指定する */
.title {
  color: red;
}

/* 【IDセレクター】 */
/* 要素のid属性を指定する */
#header {
  color: red;
}

/* 【属性セレクター】 */
/* 指定された属性が存在するかどうかや、その値に基づいて要素を指定する */
a[target="_blank"] {
	color: red;
}

/* 【疑似表記（疑似クラス、擬似要素）】 */
/* 疑似クラス */
a:hover {
  color: red;
}
/* 疑似要素 */
a::after {
  content: '';
}

/*
【使いどころ、使い分け】
・「*」全称セレクター（ユニバーサルセレクター）

1. デフォルトのスタイル（ブラウザ）を一括でリセットするとき
*/
* {
  margin: 0;
  padding: 0;
  font-size: 62.5%; /* フォントサイズを10px基準にする */
  font-family: inherit; /* form要素には継承されないため */
}

/* 2. または全体で共通のスタイルをあてたいとき
例：背景画像は全要素共通で繰り返さないようにしたい */
* {
  background-repeat: no-repeat;  
}

/*
3. 名前空間と共に使う（XML,XHTML,SVG)
異なるXML名前空間の要素が混在するXMLドキュメントにCSSを適用する。*/
@namespace url(http://www.example.com/foo);
@namespace svg url(http://www.example.com/2020/svg);

/* svg内の要素のみに共通スタイルをあてたい。 */
svg|* { ... }

/*
【ユニバーサルセレクターのパフォーマンスについて】
ユニバーサルセレクターはパフォーマンスが低い。
だから使わない方がよいという情報がある。

これは実際どうなのか？
確かにクラスセレクターやIDセレクターよりかは遅い。
今のブラウザは速いので影響はごくわずかだと考えて良いと思います。
(気にしなくてよい)
ただし、パフォーマンスが気になるパターンはある。

・基本的な考え方
ユニバーサルセレクターってあまりみたことない、頻繁に使わないと考えている
ユニバーサルセレクターは省略されているだけの場合が結構ある。
.title { ... } クラスセレクター
*.title { ... } と全く同じ

div.title { ... }
h1.title { ... }
p.title { ... }
...
など、全ての要素型セレクターと一致する

.title .title-sub { ... }
や
*.title *.title-sub { ... }

[title="foo"] { ... }
や
*[title="foo"] { ... }
と同じ
/*
ブラウザーはセレクターを右から左に評価する。
ドキュメント内のすべての要素を照合することから始まる。
先祖要素にboxというclass属性があるかどうかを全ての要素に対してチェックする

/* パフォーマンスが気になるパターン */
/* 最終的な要素を指定する部分に使っている */
.box * {
  background: #fff;
  color: black;
}
.box p {
  background: #fff;
  color: black;
}
/*
ドキュメント内の全てのp要素を照合して、p要素が5つ見つかりました。
先祖要素にboxがあるかどうかを5つのp要素に対してだけチェックすれば良い。

主要部分＝＞最終的に選択する要素
*を含むセレクターが複雑になればなるほど影響が大きくなる。*/

/* 単独で使う場合は速いので問題ないと言われている  */
* { ... }

/* パフォーマンスを気にするならこのような書き方も控える */
body div ul li { ... }

/*
Webサイトの規模にもよるかも
z軸の回転（3D）、box-shadow、アニメーションなどはもしかしたら影響出るかも
*/
* {
  transition: all 0.2s ease;
}
/*
意図していない要素にスタイルが適用されてしまう可能性がある。
*はできるだけ限定して利用する。

*/
/*
【IDセレクターとクラスセレクターの使いどころ、使い分け】
スタイルは基本的にクラスセレクター(class属性)を使ってコーディングする。
スタイルにはIDセレクターは使わないようにする。

#header {
  // 何かスタイルを宣言する
}
基本的にこのような書き方はしないようにする。

なぜか？
CSS設計のポイント
1. 特定のコンテキストに依存しない＝＞スタイルが再利用しづらい
id属性はページ内で同じ名前は1つしか使えない。

2. むやみに詳細度をあげない＝＞スタイルが上書きしづらくなる。
IDセレクター > クラスセレクター

HTML要素のid属性を使う場合
・ページ内リンクを設定する場合
<a href="#buy">購入へ</a>
↓
<section id="buy">購入はこちらから</section>

・JavaScriptから利用する場合
<div id="app">特にJavaScriptフレームワーク</div>

【スタイルでIDセレクターを使う場合を強いてあげるなら】
・改修や再設計などで一時的にスタイルを分離したい。
例：スタイル変更の影響範囲が予想しづらく、改修が困難な場合。
改修するページ以外に影響が出ないようにIDセレクターで挟む
*/
.title {
  color: #333;
  /* その他たくさんの宣言
   ...
   ...
   ...
  */
}
#new_style .title {
  color: darkgray;
}
/*
改修していくページ(部分)に順番にid属性を付与して修正する。
IDセレクターの優先度が高いことを利用して名前空間として使う。
既存のページには影響を与えることなくスタイルをページごとに順番に改修できる。
終わったら#new_styleの部分を一括削除。

スタイルにはIDセレクターは基本的に使わない。

【属性セレクターの使いどころ、使い分け】
指定された属性が存在するかどうかや、その値のパターンを指定できる

href属性の値が"https://example.com"であるa要素
a[href="https://example.com"] { ... }

href属性の値が".pdf"で終わるa要素
a[href$=".pdf"] { ... }

href属性の値が"http://"で始まるa要素
a[href^="http://"] { ... }

動的なコンテンツ（属性の有無、値が動的に変化する）
例
リンクを拡張子ごとにスタイルを変えたい
https://example.com/sample.pdf
https://example.com/sample.png
https://example.com/sample.html

コンテンツの性質によってスタイルを変えたい場合

class属性やid属性が連番になっている場合
例
<a id="task_1">タスク1</a>
<a id="task_2">タスク2</a>
<a id="task_3">タスク3</a>
*/
a[id^="task_"] {
  color: red;
}
/*
CSSとJavaScriptで属性を切り分ける
<a id="task_1" class="task task--done">
<a class="task task--done js-task-1">
<a class="task task--done js-task-2">

/*
【疑似表記の使いどころや使い分け】
疑似クラスと疑似要素に関しては使いどころや使い分けは特になさそう。
要素の状態（疑似クラス）や特定の部分（疑似要素）は一意。

疑似クラス：マウスでホバーされている状態（:hover)
疑似要素：1行目（::first-line）

※疑似クラスと疑似要素の概要や基本的な使い方については後日解説します。

/*
グループ化セレクター
カンマ「,」を使ってグループ化する
一致するすべてのノードを選択します。
*/
h1, h2, h3 {
  color: red;
} 
/*　共通のスタイルを一括で指定できる。*/
h1 {
  color: red;
}
h2 {
  color: red;
}
h3 {
  color: red;
}

/*
ただし注意点が1つある。
全てのセレクターが有効な場合に等価になる。
*/
h1, h2:has(+ span), h3 {
  color: red;
}
/* 1つでもブラウザ非対応の構文が合った場合は全体が無効になる */

/* h1 {
  color: red;
}
h2:has(+ span) {
  color: red;
}
h3 {
  color: red;
}
h4 {
  color: red;
} */
/*
ブラウザの対応、非対応がわかれるものに関しては個別で宣言した方が無難

【結合子】
結合子（コンビネーター）
・子孫結合子(スペース)
・子結合子(>)
・隣接兄弟結合子(+)
・一般兄弟結合子(~)

結合子は「セレクター」とも呼ばれる。「例：子孫セレクター」

【子孫結合子(スペース)】
セレクターの間に半角スペースを入れる。

※半角スペースがない場合
複数のクラスが適用された要素を選択する
.alert.info { ... }
○ <p class="alert info">お知らせ</p>
x <p class="alert">お知らせ</p>
x <p class="info">お知らせ</p>
結合子ではなくクラスセレクターに分類されているみたい。

【豆知識】
CSSでは基本的に「親要素」に関するセレクターや結合子はない
○ div > a { ... } // 子結合子
X 親要素（※イメージ）
x a < div { ... } // 親結合子といったものはない

X 親の兄弟要素
X 親の兄弟の子
同じ階層か下の階層に関するセレクター（子孫要素か兄弟要素）

一応、草案はある（Selectors Level 4　Working Draft）
:has()というrelational pseudo-class（意訳：関連疑似クラス）
で可能になりそう。
まだどのブラウザーでも実装されていない。（2020/04/18現在）
実装されるかどうかもまだわからない。

親要素を選択する必要がある場合は、JavaScriptを使用する必要がある。
parentNode // 親要素を取得する
closest() // 最も近い先祖要素を取得する
*/
