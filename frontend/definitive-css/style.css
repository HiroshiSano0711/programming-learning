/* selector */
/* h1 {color: maroon;}
body {background: yellow;} */

/*
ベンダープレフィックス

-epub-
International Digital Publishing Forum ePub format

-moz-
Gecko-based browsers (e.g., Mozilla Firefox)

-ms-
Microsoft Internet Explorer

-o-
Opera-based browsers

-webkit-
WebKit-based browsers (e.g., Apple Safari and Google Chrome)

ベンダー プレフィックスは、ベンダーが新機能をテストするための方法として始まり、他のブラウザーと互換性のない従来の動作に縛られることを心配することなく、相互運用性を高速化するのに役立った
これにより、初期段階でCSSをほぼ窒息させた一連の問題が回避されたが、新しい種類の問題を引き起こすことになった。

2023年初頭の時点で、ベンダー プレフィックス付きCSS機能はほとんど存在せず、古いプレフィックス付きプロパティと値はブラウザー実装からゆっくりと着実に削除されている。
プレフィックス付き CSS を記述することはほとんどないでしょうが、実際に遭遇したり、レガシー コードベースで継承したりすることはある。

-webkit-transform-origin: 0 0;
-moz-transform-origin: 0 0;
-o-transform-origin: 0 0;
transform-origin: 0 0;

これは同じことを 4 回繰り返している
WebKit、Gecko (Firefox)、Opera ブラウザー ラインごとに 1 回ずつ、そして最後にCSS標準の方法
これはもう必要ない。
 */

 /* 
 CSSにおけるスペースの扱い

 CSS は基本的にルール間の空白には無関係であり、ルール内の空白にもほとんど無関係ですが、いくつかの例外がある。
 一般的に、CSS は HTML と同じように空白を扱い、空白文字のシーケンスはすべて1つのスペースにまとめられる。
 したがって、次のようにフォーマット可能ではあるが、一番読みやすいフォーマットを使えば良い。
 */

 /* 空白なし。minifyとかで使用される */
 /* html{color:black;}  
 body {background: white;}
 p {
   color: gray;}
 h2 {
      color : silver ;
    }
 ol
    {
       color
          :
       silver
          ;
 }
  */
/* CSS Comments */
/* This is a CSS comment */

/* 複数行も可能 */
/* This is a CSS comment, and it
can be several lines long without
any problem whatsoever. */

/*
CSSのコメントはネストできない
// とかその行だけのコメントもない
*/



/* Attribute Selector

Type
Description

[foo~="bar"]
スペースで区切られた単語リストに単語'bar'が含まれる属性fooを持つ要素

[foo*="bar"]
foo属性のvalueがbarという文字列を含む全ての要素
Selects any element with an attribute foo whose value contains the substring bar

[foo^="bar"]
foo属性のvalueがbarで始まる全ての要素

[foo$="bar"]
foo属性のvalueがbarで終わる全ての要素

[foo|="bar"]
値がbarで始まり、その後にハイフン（U+002D）が続く、または値がbarと正確に等しい属性fooを持つ要素
*/

/* h1でclass属をもつ要素 */
/* h1[class] {color: silver;} */

/* title属性をもつ要素すべて */
/* *[title] {font-weight: bold;} */

/* aタグでhrefとtitle属性の両方がついている要素 */
/* a[href][title] {font-weight: bold;} */

/* hrefのvalueがhttp://www.css-discuss.org/about.htmlであるa要素 */
/* a[href="http://www.css-discuss.org/about.html"] {font-weight: bold;} */

/* hrefのvalueがhttps://www.w3.org/で、titleのvalueがW3C Homeである要素 */
/* a[href="https://www.w3.org/"][title="W3C Home"] {font-size: 200%;} */

/* urgent warningというクラスが宣言されているp要素 */
/* p[class="urgent warning"] {font-weight: bold;} */

/* lang='en' lang='en-us' lang='en-au' などにマッチ */
/* *[lang|="en"] {color: white;} */

/* figure-1.gif や figure-3.jpg. などにマッチ */
/* img[src|="figure"] {border: 1px solid gray;} */

/* class='btn' class='btn-small' class='btn-small-arrow-active' などにマッチ */
/* *[class|="btn"] { border-radius: 5px;} */


/* The Case-Insensitivity Identifier
.pdf .PDF .PDf などにマッチ
*/
/* a[href$='.pdf' i] {
   font-weight: bold;
} */


/* Defining Descendant Selectors */
/* h1 em {color: gray;}
ul ol ul em {color: gray;}
blockquote b, p b {color: gray;} */

/* selcting child */
/* h1 > strong {color: red;} */

/* 擬似要素Selector */
/* 中身が空である要素を指定 */
/* *:empty {display: none;} */

/* その要素が唯一の子要素になっている場合に選択 */
/* img:only-child {border: 1px solid black;} */

/* href属性をもつa要素の子孫要素になっていて、兄弟要素を持たない要素を選択 */
/* a[href] img:only-child {border: 2px solid black;} */

/*
:only-child については2つの点を覚えておく。
1つ目は、前に説明したように、親要素ではなく、唯一の子にしたい要素に常に適用すること。
2つは、子孫セレクターで :only-child を使用する場合、リストされている要素を親子関係に制限するわけではないこと。
*/


/* :only-of-type
兄弟要素の中で同じ要素がない要素を選択
*/
/* p > img:only-of-type {float: right; margin: 20px;} */


/* 最初の要素、最後の要素を選択する */
/* p:first-child {font-weight: bold;} */
/* li:first-child {text-transform: uppercase;} */

/* p:last-child {font-weight: bold;}
li:last-child {text-transform: uppercase;} */

/*
同じ意味

p:only-child {color: red;}
p:first-child:last-child {background-color: red;}
*/

/* tableとかで使えそう */
/* td:first-of-type {border-left: 1px solid red;}
td:last-of-type {border-left: 1px solid red;}

tr:nth-child(odd) {background: silver;}
tr:nth-child(4n - 2) {background: silver;} */

/* tr:nth-child(3n + −2) {background: red;} INVALID */
/* li:nth-child(-n + 5) {font-weight: bold;} backward */

/* tr:nth-last-child(odd) {background: silver;} */
/* tr:nth-last-child(2n+1) {background: silver;} equivalent */

/* 
近い将来サポートされる
:nth-child(2n + 1 of p.callout)
*/

/*
:visited, :linkについて
10 年以上もの間、訪問済みリンクは、未訪問リンクと同様に、利用可能な任意の CSS プロパティを使用してスタイル設定できた。
しかし、2000年代半ばに、視覚的なスタイル設定と単純なDOMスクリプトを使用して、ユーザーが特定のページを訪問したかどうかを判断できることが何人かによって実証された。
たとえば、
:visited {font-weight: bold;}
というルールを指定すると、スクリプトは太字のリンクをすべて見つけて、ユーザーが訪問したサイトをユーザーに伝えることができます。
さらに悪いことに、それらのサイトをサーバーに報告することもできる。
同様のスクリプトを使用しない戦術では、背景画像を使用して同じ結果を実現する。
これはそれほど深刻ではないように思えるかもしれませんが、非認可の宗教団体、「不道徳」または「腐敗」サイトなど、特定のサイトを訪問した人を投獄する国のWebユーザーにとっては非常に壊滅的。
これらの手法は、フィッシング サイトでも、ユーザーが訪問したオンライン バンクを判断するために使用できます。そのため、2つの手順が取られた。
最初のステップは、訪問したリンクには色関連のプロパティのみを適用できることです。色、背景色、列ルール色、アウトライン色、境界色、および個々のサイドの境界色のプロパティ (例: 境界上部の色) です。
訪問したリンクに他のプロパティを適用しようとすると無視されます。さらに、:link に定義されたスタイルは訪問したリンクと未訪問のリンクの両方に適用されるため、:link は実質的に「未訪問のハイパーリンクのスタイル」ではなく「ハイパーリンクのスタイル」になる。
2 番目のステップは、訪問したリンクのスタイルが DOM 経由でクエリされた場合、結果の値はリンクが訪問されていないときと同じになることです。したがって、訪問したリンクを未訪問のリンクの青ではなく紫に定義した場合、リンクは画面上で紫色に表示されても、その色の DOM クエリは紫色ではなく青の値を返す。
この動作は、「プライベート ブラウジング」モードだけでなく、すべてのブラウジング モードで発生します。 CSS を使用して訪問済みリンクと未訪問リンクを区別する方法には制限がありますが、ユーザビリティとアクセシビリティのためには、訪問済みリンクでサポートされている限定的なスタイルを使用して未訪問リンクと区別することが重要。
*/

/* input[type="email"]:focus {
   background-position: 100% 50%;
   background-repeat: no-repeat;
}
input[type="email"]:focus:invalid {
   background-image: url(warning.jpg);
}
input[type="email"]:focus:valid {
   background-image: url(checkmark.jpg);
}
input[type="number"]:focus {
   background-position: 100% 50%;
   background-repeat: no-repeat;
}
input[type="number"]:focus:out-of-range {
   background-image: url(warning.jpg);
}
input[type="number"]:focus:in-range {
   background-image: url(checkmark.jpg);
}
input[type="number"]:invalid {color: red;}
input[type="number"]:in-range {font-weight: bold;}

textarea:read-only {opacity: 0.75;}
pre:read-write:hover {border: 1px dashed green;}

*:lang(fr) {font-style: italic;}
*[lang|="fr"] {font-style: italic;} */

/* rtl(right to left) or ltr(left to right) */
/* *:dir(rtl) {border-right: 2px solid;} */

/* negation pseudo-class */
/* li:not(.moreinfo) {font-style: italic;}

*.link:not(li):not(p) {font-style: italic;}
*.link:not(li, p) {font-style: italic;} */
/* form *:not(p + *) */
/* form *:not(p + *, li, thead > tr > th) */

/* :is() and :where() pseudo-classes */


/* ol li, ul li {font-style: italic;} */
/* rewrite */
/* :is(ol, ul) li {font-style: italic;}

div:has(img) {
	border: 3px double gray;
} */

/* Shadow Pseudo-Classes */
/* :host {border: 2px solid red;}

:host(.countries) {border: 2px solid red;}
:host(.regions) {border: 1px solid silver;}
:host(.cities) {border: none; background: gray;}

@layer site, page;
@layer site {
   h1 {color: red;}
}
@layer page {
   h1 {color: blue;}
} */

/*
ピクセルは画面上の小さなボックスだが、CSSではピクセルをより抽象的に定義している。
CSS用語では、ピクセルは1インチあたり96ピクセルを生成するために必要なサイズとして定義されている。
多くのUAはこの定義を無視し、画面上のピクセルを単純に処理する。
ページのズームや印刷では、100ピクセル幅の要素が100デバイスドット幅を超えてレンダリングされる可能性があるため、スケーリング係数が作用する。
*/

/* Basic Visual Formatting */

/* Basic Boxes

content
padding
border
margin

padding,border,margin, are option because can set value with 0

レイアウトを組む上で覚えておくべき用語

Block flow direction
block axis
多くの言語では上から下
CJKでは書式モードで変化する。右から左から上から下


Inline base direction
inline axis

Normal flow
親の書き込みモードに基づいて、要素がブラウザのビューポート内に配置されるデフォルトのシステム。
ほとんどの要素は通常のフロー
要素が通常フローから外れるのは
   フロート (使われない)
   table
   position
   flex box
   grid layout


Block box
段落、見出し、<div> などの要素によって生成されるボックス。
通常フローではボックスの前後に改行を生成し、通常フローのブロック ボックスがブロックフロー軸に沿って次々に積み重なります。
display: block を宣言することで、ほぼすべての要素でブロック ボックスを生成できる
ブロック ボックスを生成させる方法は他にもある(たとえば、要素をフロートさせるか、フレックス アイテムにするなど)。


Inline box
これは、<strong> や <span> などの要素によって生成されるボックス。
インラインベース方向に沿ってレイアウトされ、ボックスの前後に改行は生成されない。
インラインボックスがその要素のインラインサイズよりも長い場合、(置換されていない場合はデフォルトで) 複数行に折り返される。
display: inline を宣言することで、どの要素でもインライン ボックスを生成することができる。


Nonreplaced element
コンテンツがドキュメント内に含まれる要素で置換されない。
例：<p>タグはテキストが要素自体の中にあるため非置換要素


Replaced element
他のもののプレースホルダーとして機能する要素です。
img、formなど。
imgは挿入される画像ファイルを指しているだけで、画像に置換される。
ほとんどのform要素も置換される。


Root element
これはドキュメントツリーの最上位の要素です。
HTMLドキュメントでは<html>要素です。
XMLドキュメントでは、言語が許す限り何でもかまいません。
たとえば、RSS ファイルのルート要素は <rss> ですが、SVGドキュメントではルート要素は<svg>です。


The Containing Block
包含ブロック。
すべての要素のボックスは、その包含ブロックを基準にしてレイアウトされる。
実際のところ、包含ブロックはボックスのレイアウトコンテキスト。

一番近い祖先のblockかlist item boxを基準
display: list-item;

*/

/* changing role */

/* by default, inline block */
/* nav a {display: block;}

#rollcall li {display: inline; border-right: 1px solid; padding: 0 0.33em;}
#rollcall li:first-child {border-left: 1px solid;} */


/* box size inline size 
非置換インライン要素やテーブル要素には使えない。他は大体使える。
*/
/* p {inline-size: 25ch;} */
/* p img {block-size: 1.5em;} */
/* #maingrid > nav {block-size: clamp(2rem, 4em, 25vh);} */

/* 
block-sizeがautoである限り、ブロック サイズは要素のコンテンツによって決定され、作成者によって決定されることはない。
これは通常、特にテキストを含む要素の場合に望ましい
*/

/* Content-Based Sizing Values 
ブロックとインラインのサイズを設定するために、これまで見てきた長さとパーセンテージのほかに、コンテンツベースのサイズ設定を提供するキーワードがいくつかある。

max-content
コンテンツに収まるようにできるだけ多くのスペースを取り、テキスト コンテンツの場合は行の折り返しも抑制します。

min-content
コンテンツに収まるように、できるだけ小さなスペースを占有します。

fit-content
max-content、min-content、通常のコンテンツサイズの値を計算し、min-content と通常のサイズの最大値を取り、max-contentの最小値とmin-contentと通常のサイズの大きい方の値のどちらかを取り、決定されたスペースの量を占める。
*/

/* p.max-content { */
   /* width: min-content; */
   /* width: max-content; */
/* } */

/* main {min-inline-size: min-content; max-inline-size: 75ch;} */

/* 通常フローで埋め込まれたインライン画像をある時点まで固定のサイズにする */
/* #cb1 img {max-block-size: 2em;} */
/* #cb2 img {max-block-size: 1em;} */

/* HeightとWidth
heightなどの物理的な指示の代わりに、block-sizeなどのブロックおよびインラインプロパティを使用し、デザインを他の言語に翻訳されたコンテンツに適用すると、レイアウトは意図に合わせて自動的に調整されます。
*/

/* widthの代わりにinline-size, heightの代わりにbox-sizeを使っておくと書式を変更した場合に意図した通りのレイアウトになる */
/* .box-sizing {
   inline-size: 400px; 
   writing-mode: horizontal-tb;
} */
/*
margin-block-start または margin-block-end のいずれかが auto に設定されていても、両方が設定されていない場合、両方とも 0 と評価されます。
*/

/* div.one   {overflow-x: scroll; overflow-y: hidden;}
div.two   {overflow-x: hidden; overflow-y: scroll;}
div.three {overflow-x: scroll; overflow-y: scroll;} */

/* p.neg {margin-block-start: -50px; margin-block-end: 0; border: 3px solid gray;} */
/* p.neg {margin-block-end: -50px; margin-block-start: 0; border: 3px solid gray;} */

/*
ブロック軸の書式設定の重要な側面は、隣接するマージンの折りたたみ。
ブロック方向の隣接するマージンを比較し、それらのマージンのうち最大のものだけを使用して隣接するブロック要素間の距離を設定する方法。
折りたたみの動作はマージンにのみ適用されることに注意。パディングと境界線は折りたたまれない。

インライン マージンは折りたたまれない (ブロックマージンとは異なる)
親要素のパディング、境界線、およびマージンは、子のインライン レイアウトに影響を与える可能性がある。
影響は間接的で、要素のマージンなどによって子要素のオフセットが誘発される可能性がある。

inline-sizeもinline-marginもすべてautoにした場合はinline-sizeはautoに、inline-marginは0に設定される。


*/

/* liの隣接間のマージンは25pxになると思われるが折り畳まれるので15になる */
/* li {margin-block-start: 10px; margin-block-end: 15px;} */

/* 
背景色を設定している場合、ブラウザーは通常、要素を最初から最後まで順にレンダリングするため、ドキュメント内で後続の通常フロー要素が先行する要素を上書きすることが予想される
負のマージンで重なりあった場合はどの要素がどの要素の上にあるかわかりづらくなる。
*/

/* div {inline-size: 500px; border: 3px solid black;} */
/* p.wide {margin-inline-start: 10px; margin-inline-end: -50px;inline-size: auto;} */

/* 正方形を維持 */
/* .gallery div {width: auto; aspect-ratio: 1/1;} */
/*  2:1 ratio */
/* .cards div {height: auto; box-sizing: border-box; aspect-ratio: 2/1;} */

/*
匿名テキスト
インライン要素内に含まれない文字列。
したがって、マークアップ <p> I'm <em>so</em> happy!</p> では、「 I’m 」と「 happy!」のシーケンスは匿名テキスト。
スペースは他の文字と同様に文字であるため、スペースはテキストの一部であることに注意。


Em ボックス
指定されたフォント (文字ボックスとも呼ばれます) で定義される。
実際のグリフは、em ックスよりも高くすることも低くすることもできる
CSSでは、font-size の値によって各 em ボックスの高さが決まる。


コンテンツ領域
非置換要素の場合、コンテンツ領域は 2 つのうちのいずれかになる。
CSS 仕様では、ユーザー エージェントがどちらかを選択できる。
コンテンツ領域は、要素内のすべての文字の em ボックスを連結して記述されるボックス、または要素内の文字グリフで記述されるボックス。
簡潔にするために em ボックスの定義を使用する。これは、ほとんどのブラウザーで使用されているものになる。
置換要素の場合、コンテンツ領域は、要素の本来の高さに、余白、境界線、またはパディングを加えたもの。


リーディング
リーディング (「led-ing」と発音) は、font-size と line-height の値の差。
この差は半分に分割され、半分はコンテンツ領域の上部に、もう半分は下部に適用される。
コンテンツ領域へのこれらの追加は、おそらく当然のことながら、ハーフ リーディングと呼ばれる。
行間は、置換されていない要素にのみ適用される。


インライン ボックス
コンテンツ領域に行間を追加することで記述されるボックス。
置換されていない要素の場合、要素のインライン ボックスの高さは、line-height プロパティの値と正確に等しくなる。
置換された要素の場合、行間は置換された要素には適用されないため、要素のインラインボックスの高さは、コンテンツ領域と正確に等しくなる。


行ボックス
これは、行にあるインライン ボックスの最高点と最低点を囲む最短のボックス。
行ボックスの上端は最も高いインラインボックスの上部に沿って配置され、行ボックスの下部は最も低いインラインボックスの下部に沿って配置される。
「上部」と「下部」は、ブロックフローの方向を基準に考慮されることに注意。
*/


/* inline format */

/* Nonreplaced Element */
/*
手順

1. 各インライン非置換要素と子孫インライン要素の一部ではないテキストのfont-sizeとline-heightの値を見つけて、それらを組み合わせる。
line-heightからfont-sizeを減算することで行われ、ボックスの行間が算出される。
行間は半分に分割され、各emボックスの上部と下部に適用される。

2. 各置換要素のブロック開始エッジとブロック終了エッジに沿った高さの値、および余白、パディング、境界線の値を見つけて、それらを合計する。

3. 各コンテンツ領域について、全体の行のベースラインより上にある部分と下にある部分の割合を計算します。
これは簡単な作業ではない。
各要素と匿名テキストのベースラインの位置と行自体のベースラインを把握し、それらをすべて揃える必要があるため。
さらに、置き換えられた要素のブロック端のエッジは、全体の行のベースライン上に配置される。

4. vertical-alignの値が指定された要素の垂直オフセットを決定します。
これにより、その要素のインライン ボックスがブロック軸に沿ってどれだけ上または下に移動するかがわかり、それによって要素がベースラインより上または下にどれだけあるかが変わる。

5. 1~4ですべてのインラインボックスがどこに配置されるかがわかったので、最終的な行ボックスの高さを計算する。
これを行うには、ベースラインと最も高いインラインボックスの上部との間の距離と、ベースラインと最も低いインラインボックスの下部との間の距離を加算するだけ。

*/

/*
まず、明示的に宣言されているかどうかに関係なく、すべての要素に行の高さがあることを知っておくこと。
この値はインライン要素の表示方法に大きく影響するため、十分に注意する。

行の高さ (または行ボックスの高さ) は、その構成要素とテキストなどの他のコンテンツの高さによって決まる。
行の高さは、ブロックレベル要素ではなく、インライン要素と他のインライン コンテンツに影響することを理解することが重要 (少なくとも直接影響はない)。
ブロックレベル要素に行の高さの値を設定できるが、その値は、そのブロックレベル要素内のインラインコンテンツに適用された場合にのみ視覚的な影響を与える。

*/

/* line-heightは、親要素ではなく要素自体のfont-sizeを基準に設定されることに注意 */
/* p {line-height: 1em;} */
/* strong {font-size: 250%; line-height: 1em;} */

/* span {border: 1px dashed black;} */

/* text-align: justify 
テキストを両端揃えにしてinline-boxのエッジに揃える
テキストが両端揃えになっている場合は、word-spacing の値を上書きできます。(letter-spacing の値は（文字間隔の値は、長さの値である場合は上書きできない）
*/
/* p {line-height: 1em;} */
/* strong {font-size: 250%; line-height: 1em;} */

/* p {line-height: 1.8em;} */
/* a:link {border: 5px solid blue;} */

/*
a paragraph will be 31.5 pixels (14 × 1.5 × 1.5)
we must make the <p> element’s line-height equal to or greater than 32px.
*/
/* p {font-size: 14px; line-height: 24px;}
a:link {border: 5px solid blue;}
strong {font-size: 150%; line-height: 1.5em;} */

/*
結局のところ、行の高さを設定する最良の方法は、生の数値を値として使用すること
*/

/* span {padding: 4px;} */

/*  */
body {line-height: 1.5;}
p {font-size: 15px; line-height: 1.5;}
small {font-size: 66%;}
/* strongにline-heightを設定することで大きくなりすぎるのを防ぐ */
strong {font-size: 200%; line-height: 1em;}

/*
インライン要素のボーダーエッジはline-heightではなくfont-sizeによってコントロールされる
font-sizeを12pxに、line-heightを36pxにしてもline boxの高さは12px
ボーダーはその周りに描かれる。
paddingを使用することによってボーダーをテキストから離して描画できるが、line boxの高さ自体には影響を与えない

マージンについては、実質的には、インラインの非置換要素のブロックエッジには適用されません。
line boxの高さには影響しないからため。
要素のインラインの端は別の話です。
インライン要素は基本的に1行としてレイアウトされ、その後分割されるという考え方になる。
したがって、インライン要素にマージンを適用すると、それらのマージンは要素の先頭と末尾に表示されます。
これらはそれぞれ、インライン開始マージンとインライン終了マージンです。パディングもこれらの端に表示されます。
したがって、パディングとマージン (および境界線) は行の高さには影響しませんが、テキストを押し出されレイアウトに影響を与える可能性がある。
高さには影響しないけど幅には影響を与えるということを頭にいれておく。
実際、負のインライン開始マージンとインライン終了マージンを設定すると、テキストがインライン要素に引き寄せられたり、重なりが生じたりする。

*/

/*
box-decoration-break プロパティは、インライン ボックスで使用されることが最も多いですが、要素に区切りがある場合、たとえばページ区切りがページ メディア内の要素を中断する場合など、いつでも適用される。
このような場合、各フラグメントは個別のスライスになる。
box-decoration-break: clone を設定すると、各ボックス フラグメントは、境界線、パディング、背景などに関してコピーとして扱われる。
同じことが複数列レイアウトにも当てはまり、要素が列区切りによって分割されている場合、box-decoration-break の値がレンダリング方法に影響する。
*/

/*
インラインの非置換要素の背景が重ならないようにしても、使用しているフォントによっては重なり合うことがある。
問題は、フォントの em ボックスと文字グリフの違いにある。
結局のところ、ほとんどのフォントには、文字グリフと同じ高さの em ボックスがない。

インラインの非置換要素の「描画領域」は、UAに委ねられている。
UAが em ボックスをコンテンツ領域の高さと見なす場合、インラインの非置換要素の背景は em ボックスの高さ (font-size の値) と同じになる。
UAがフォントの最大のアセンダーとディセンダーを使用する場合、背景は em ボックスよりも高くなるか低くなる可能性がある。
したがって、インラインの非置換要素の行の高さを 1em に設定しても、背景が重なり合う可能性がある。
*/


/* Inline replaced Element */

/* p {font-size: 15px; line-height: 18px;} */
/* img {block-size: 30px; margin: 0; padding: 0; border: none;} */
/* p {font-size: 15px; line-height: 18px;}
img {vertical-align: 50%;} */

/* img {block-size: 50px; inline-size: 50px;}
img.one {margin: 0; padding: 0; border: 3px dotted;}
img.two {margin: 10px; padding: 10px; border: 3px solid;}

/* 上下に隙間ができる */
/* td {font-size: 12px;} */

/* Inline-Block Elements */
/*
インライン ブロック要素は、置換要素として行内でフォーマットされる
インライン ブロック要素の下端 (ブロックの端) は、デフォルトでテキスト行のベースラインに配置され、それ自体で改行されない。

インラインブロック要素内では、コンテンツは要素がブロック レベルであるかのようにフォーマットされます。
プロパティ width と height は、ブロックレベルまたはインライン置換要素と同様に要素に適用される(ボックスのサイズ設定も適用される)
これらのプロパティは、周囲のコンテンツよりも高い場合は行の高さを増やします。
*/

/* div {margin: 1em 0; border: 1px solid;}
p {border: 1px dotted;}
div#one p {display: block; inline-size: 6em; text-align: center;}
div#two p {display: inline; inline-size: 6em; text-align: center;} */
/* div#three p {display: inline-block; inline-size: 6em; text-align: center;} */

/* div#three p {display: inline-block; block-size: 4em;} */


/* Flow Display */
/*
display: flow を使用してレイアウトするように宣言することは、通常と同じようにブロックとインラインのレイアウトを使用することを意味する。
ただし、インラインと組み合わせた場合は、インライン ボックスが生成されます。

次のルールの最初の2つはブロック ボックスになり、3つ目はインライン ボックスになる。
*/
/* #first {display: flow;}
#second {display: block flow;}
#third {display: inline flow;} */

/*
Old values  New values

block  block flow

inline  inline flow

inline-block  inline flow-root

list-item  list-item block flow

inline-list-item  list-item inline flow

table  block table

inline-table  inline table

flex  block flex

inline-flex  inline flex

grid  block grid

inline-grid  inline grid

*/

/* ul {border: 1px solid red;} */
/* li {border: 1px solid silver;} */


/* Chapter 7. Padding, Borders, Outlines, and Margins */
/*
上から時計回り
padding: top right bottom left
*/
/* h1 {padding: 10px 20px 15px 5px;} */

/* logical padding */
/* p {
   padding-block-start: 0.25em;
   padding-block-end: 0.25em;
   padding-inline-start: 1em;
   padding-inline-end: 1em;
} */

/* short hand */
/* p {
   padding-block: 0.25em;
   padding-inline: 1em;
} */

/* p {padding: 10%; background-color: silver;} */

/* Border
doubleについては、作成される2本の線の幅と、それらの間のスペースの幅がborder-widthの値(次のセクションで説明)と等しくなるように定義されている。
ただし、CSS仕様では、一方の線をもう一方の線よりも太くするか、常に同じ幅にするか、スペースを線よりも太くするか細くするかについては規定されていない。
これらのオプションはすべてUAに決定を委ねられており、作成者が最終結果に影響を与える確実な方法はない。
*/

/* p.new1 {border-style: solid none dashed;} */
/* p.new2 {border-style: solid none dashed none;} */

/* h1 {border-style: solid solid solid none;} */
/* 以下と同じ */
/* h1 {border-style: solid; border-left-style: none;} */

/* border-styleとborder-left-styleの宣言の順序を入れ替えると上書きされることに注意 */
/* h1 {border-left-style: none; border-style: solid;} */

/* p {
   border-block-style: solid double;
   border-inline-style: dashed dotted;
}
p {
   border-block-start-style: solid;
   border-block-end-style: double;
   border-inline-start-style: dashed;
   border-inline-end-style: dotted;
} */
/*
border-width の値はボックス モデルに関与し、要素のサイズに影響を与えることを覚えておくことが重要
defaultはmedium
*/

/* h1 {border-style: dotted; border-width: thin 0px;}
p {border-style: solid; border-width: 15px 2px 8px 5px;}

p {
   border-block-width: thick thin;
   border-inline-width: 1em 5px;
}
p {
   border-inline-start-width: 1em;
   border-inline-end-width: 5px;
   border-block-start-width: thick;
   border-block-end-width: thin;
} */

/*
境界線が存在しないため、幅を持つことはできない。
したがって、何を定義しようとしても、幅は自動的に 0 (ゼロ) に設定される。
境界線の幅について議論することは、境界線が存在するコンテキストでのみ意味をなす。
これは覚えておくことが重要。なぜなら、境界線のスタイルを宣言し忘れることはよくある間違いだから。
*/
/* p {border-style: none; border-width: 20px;}

p {
   border-block-color: black green;
   border-inline-color: orange blue;
}
p {
   border-inline-start-width: orange;
   border-inline-end-width: blue;
   border-block-start-width: black;
   border-block-end-width: green;
} */

/* Transparent borders */
/* a:link, a:visited {
   border-style: inset;
   border-width: 5px;
   border-color: transparent;
} */
/* a:hover {border-color: gray;} */

/* #example {border-radius: 2em;} */
/* #example {border-radius: 33%;} */
#example {border-radius:
   1em  /* Top Left */
   2em  /* Top Right */
   3em  /* Bottom Right */
   4em; /* Bottom Left */
}

/*
border-image-source プロパティは、ブラウザに境界線を検索する場所を指示する方法
border-imageはややこしいので別途調べる
*/


/*
CSSは、アウトラインと呼ばれる特別な種類の要素装飾を定義する。
実際には、アウトラインは境界のすぐ外側に描画されることが多いですが、すべてではない。
仕様書に記されているように、アウトラインは境界と3つの基本的な点で異なります:

1. アウトラインは表示されますが、レイアウト スペースを占有しない。
2. UAは、レイアウト スペースを占有せず、レイアウトを変更しないため、:focus 状態の要素にアウトラインをレンダリングすることがよくある。
3. アウトラインは長方形でない場合がある

アウトラインは、すべてかゼロかの命題。つまり、境界線の片側を他の側から独立してスタイル設定することはできない。

borderとの大きな違いは、アウトラインには境界線のように
   hidden スタイルを設定できないことと、
   アウトラインに auto スタイルを設定できること
*/

/*
背景は継承されない。背景は要素を通して表示される。
これは無関係な違いのように思えるかもしれませんが、これは重要な違い。
*/

/* 背景の描画領域を制御する */
/* div[id] {color: navy; background: silver; */
/* padding: 1em; border: 0.5em dashed;} */
/* #ex01 {background-clip: border-box;}  default value */
/* #ex02 {background-clip: padding-box;} */
/* #ex03 {background-clip: content-box;} */

/*
background-clip はルート要素には影響しません 
(HTML では、<html> 要素、または <html> で背景スタイルを定義していない場合は <body> 要素)。
これは、ルート要素の背景描画の処理方法に関係しています。
*/

/* 
画像は、指定した背景色の上に重ねられる。
画像がタイル化されていない場合や不透明でない部分がある場合は、背景が透けて見え、背景の色が半透明の画像の色と混ざる。
画像の読み込みに失敗した場合は、画像の代わりに指定した背景色が表示される。
このため、背景画像を使用するときは、背景色を指定することをお勧めされる。
そうすれば、画像が表示されなくても少なくとも判読可能な結果が得られる。 */

/* body {
   background-image: url(yinyang.png);
   background-repeat: no-repeat;
   background-position: center;
   background-attachment: fixed;
} */

/* 常に覚えておく:
カバー画像とコンテンツ画像のサイズは、常に、background-origin で定義される背景配置領域を基準とする。 */

/* div {
   border: 1px solid red;
   background: url(yinyang-sm.png) center no-repeat green;
} */
/* that’s shorthand 'background', explained in the next section */
/* .cover {background-size: cover;}
.contain {background-size: contain;}
.clip-content {background-clip: content-box;}
.clip-padding {background-clip: padding-box;}
.origin-content {background-origin: content-box;}
.origin-padding {background-origin: padding-box;} */

/*
このセクションでは、ラスター画像 (正確には GIF) を使用しましたが、拡大すると見栄えが悪くなり、縮小するとネットワーク リソースが無駄になります
 (拡大が頻繁に行われる場合に特に目立つようにするためです)。
 これは、背景のラスター画像をスケーリングする際の固有のリスクです。
 一方、背景画像として SVG を使用するのも簡単です。SVG は拡大または縮小しても品質が損なわれることなく、帯域幅も無駄になりません。
背景画像をスケーリングする場合、写真である必要がなければ、SVG または CSS グラデーションの使用を強く検討してください。
*/

/* body {
   background-color: white;
   background-image: url(yinyang.png);
   background-position: top left;
   background-repeat: repeat-y;
   background-attachment: fixed;
   background-origin: padding-box;
   background-clip: border-box;
   background-size: 50% 50%;
}
body {
   background:white url(yinyang.png) repeat-y top left/50% 50% fixed
  padding-box border-box;
}
body {
   background: fixed url(yinyang.png) padding-box border-box white repeat-y
  top left/50% 50%;
}
body {
   background: url(yinyang.png) top left/50% 50% padding-box white repeat-y
 fixed border-box;
} */

/* 同等 */
/* body {
   background: white url(yinyang.png);
}
body {
   background: white url(yinyang.png) transparent 0% 0%/auto repeat
      scroll padding-box border-box;
} */

/*
CSSには、ボックスモデルに影響を与えずに要素の内側と外側の両方を装飾できる別のプロパティ、box-shadowがある
*/

/* .box:nth-of-type(1) {box-shadow: 1em 1em 2px rgba(0,0,0,0.5);}
.box:nth-of-type(2) {box-shadow: 2em 0.5em 0.25em rgba(128,0,0,0.5);}
.box:nth-of-type(3) {box-shadow: 0.5em 2ch 1vw 13px rgba(0,128,0,0.5);}
.box:nth-of-type(4) {box-shadow: -10px 25px 5px -5px rgba(0,128,128,0.5);}
.box:nth-of-type(5) {box-shadow: 0.67em 1.33em 0 -0.1em rgba(0,0,0,0.5);}
.box:nth-of-type(6) {box-shadow: 0.67em 1.33em 0.2em -0.1em rgba(0,0,0,0.5);}
.box:nth-of-type(7) {box-shadow: 0 0 2ch 2ch rgba(128,128,0,0.5);} */


/* Gradient */
/*
CSSで定義される3つの画像タイプは、線形グラデーション、放射状グラデーション、円錐グラデーション。
各タイプには、繰り返しと非繰り返しの2つのサブタイプがある。
グラデーションは背景で最もよく使用されるが、画像が許可されているあらゆるコンテキストで使用可能 (たとえば、list-style-imageやborder-image など)。
グラデーションとは、ある色から別の色への視覚的な遷移。
黄色から赤へのグラデーションは黄色から始まり、黄色が薄くなってオレンジの赤みがかった色合いを経て、最終的に完全な赤になる。
遷移がどの程度緩やかまたは急激であるかは、グラデーションの
   スペースの量、
   カラーストップ
   進行色
のヒントを定義する方法によって異なる。

グラデーションを探索するプロセスを進める際は、常に次の点に留意してください。
   グラデーションは SVG、PNG、JPEG などとまったく同じ画像であること
   
しかし、グラデーションはレンダリングパフォーマンスに優れ、読み込みに追加のHTTPリクエストを必要とせず、無限にスケーラブル。

グラデーションの興味深い点は、固有の寸法がないこと。
background-size プロパティの値 auto を使用すると、100% として扱われる。
背景グラデーションのbackground-sizeを定義しない場合は、デフォルト値autoに設定され、100% 100% と宣言するのと同じ。
したがって、デフォルトでは、背景グラデーションは背景配置領域全体を埋めます。
グラデーションの背景位置を長さ(パーセンテージではない)の値でオフセットすると、デフォルトではタイル状になることに注意。
*/

/* div {
   display: inline-block;
   block-size: 100px;
   inline-size: 100px;
}
#ex01 {background-image: linear-gradient(purple, gold);}
#ex02 {background-image: linear-gradient(90deg, purple, gold);}
#ex03 {background-image: linear-gradient(to left, purple, gold);}
#ex04 {background-image: linear-gradient(-135deg, purple, gold, navy);}
#ex05 {background-image: linear-gradient(to bottom left, purple, gold, navy);}

#spectrum {
   block-size: 300px;
   inline-size: 500px;
   background-image: linear-gradient(
      55deg, #4097FF -25%, #FFBE00, #4097FF 125%
  )
} */

/* div#one {display: flex;}
div#two {display: inline-flex;}
div {border: 1px dashed; background: silver;}
div > * {border: 1px solid; background: #AAA;}
div p {margin: 0;} */

/* * {
   outline: 1px #ccc solid;
   margin: 10px;
   padding: 10px;
 }
 body, nav, main, article {
   display: flex;
 }
 body, article {
   flex-direction: column;
 } */
 

 /* display: grid はブロックレベルのグリッドを作成しますが、仕様では「グリッド コンテナーはブロック コンテナーではない」と明示的に述べている。
 グリッド ボックスはブロック コンテナーと同様にレイアウトに関与しますが、両者には違いがある。
 floatはgridコンテナーに侵入しない。
 グリッド コンテナーのマージンは、その子孫のマージンと相殺されません。
 これも、ブロック ボックスとは異なる。
 */

#warning {
   display: grid;
   background: #FCC; padding: 0.5em;
   grid-template-rows: 1fr;
   grid-template-columns: repeat(7, 1fr);
}
/* 匿名テキストもグリッド レイアウトに参加するが、さまざまなグリッドプロパティで影響を与えるのがはるかに困難 (または不可能)*/

/*
最も基本的な単位はグリッド ラインです。
1つ以上のグリッド ラインの配置を定義することで、グリッドの残りのコンポーネントを暗黙的に作成する。


グリッド トラック

2つの隣接するグリッド ライン間の連続したラン。
言い換えると、グリッド列またはグリッド行になる。
グリッド コンテナーの一方の端からもう一方の端まで続く。
グリッド トラックのサイズは、それを定義するグリッド ラインの配置によって決まる。


グリッドセル

4 本のグリッド ラインで囲まれたスペースで、グリッド ラインが通っていないスペース。
テーブル セルに似ている。
グリッド レイアウトの最小単位。
グリッドセルは、CSSグリッドプロパティで直接指定することはできない。
つまり、特定のセルにグリッド アイテムを関連付ける必要があることを指定できるプロパティは以下を除いてない。


グリッド領域
4本のグリッド ラインで囲まれ、1つ以上のグリッドセルで構成される長方形の領域。
領域は、1つのセルと同じか、グリッド内のすべてのセルと同じか、いずれか。
グリッド領域は、CSS グリッドプロパティで直接指定できます。
これにより、領域を定義して、グリッドアイテムを関連付けることができます。
*/

/* #grid {
   display: grid;
   grid-template-columns: [start col-a] 200px [col-b] 50% [col-c] 100px [stop end last];
   grid-template-rows: [start masthead] 3em [content] 80% [footer] 2em [stop end];
} */

/*
行と列は同じ名前空間を共有しないので、2つのコンテキストで同じ名前を再利用できる。
コンテンツ行トラックのパーセンテージ値です。
これは、グリッド コンテナーの高さを基準に計算される。
高さが500ピクセルのコンテナーの場合、高さが400ピクセルのコンテンツ行が生成される(この行のパーセンテージ値は 80% であるため)。
通常、これを行うには、グリッドコンテナーの高さを事前に知っておく必要がありますが、常にそうであるとは限らない。
*/

/*
gridにおいてはパーセントはpxの値も固定幅になる。
画面の大きさが決まったら自動的に固定されるため
50%と指定しても500pxだったら250pxで固定される。
minmaxで指定しても結局は 〇〇px以上〇〇px以下というふうに決まり、中身のコンテンツに応じて可変ではない。
その範囲を超えた場合に対応できないので柔軟性に欠けてしまう。

fractinal unit
利用可能なスペースを特定の割合で分割し、その割合をさまざまな列に分配したい場合は、frユニットが役立ちます。
fr は、グリッド内の残りのスペースの割合を表す柔軟なスペース量を指定できる。

最も単純な例
同等
grid-template-columns: 1fr 1fr 1fr 1fr;
grid-template-columns: 25% 25% 25% 25%;

2つ目のカラムを他の列の2倍にする
grid-template-columns: 1fr 2fr 1fr;

grid-template-columns: 1fr 3.14159fr 1fr;
grid-template-columns: 15em 1fr 10%;

width: 100em; grid-template-columns: 15em 4.5fr 3fr 10%;
grid-template-columns: 15em 4.5fr minmax(5em,3fr) 10%;


#gallery {
   display: grid;
   grid-template-columns: max-content max-content max-content max-content;
   grid-template-rows: max-content max-content max-content;
}

グリッド仕様でブラウザーが最初に列のサイズを解決し、その後に行のサイズを解決するように指示されている。

min-content および max-content キーワードに加えて、fit-content() 関数を使用すると、特定の種類のサイズ設定パターンをよりコンパクトに表現できます。
解読するのは少し複雑ですが、努力する価値はある
fit-content() 関数は、次のように <length> または <percentage> を引数として受け入れる:

fit-content(argument) => min(max-content, max(min-content, argument))
*/

/* #thefollowing  {
   display: grid;
   grid-template-columns: fit-content(50ch) fit-content(50ch) fit-content(50ch);
   font-family: monospace;
} */

/* #grid {
   display: grid;
   grid-template-columns: repeat(10, 5em);
} */

/* #grid {display: grid;
   grid-template-columns: repeat(3, 2em 1fr 1fr);
} */

/* #grid {
   display: grid;
   grid-template-areas:
      "header     header    header    header"
      "leftside   content   content   rightside"
      "leftside   footer    footer    footer";
} */

/* #grid {
   display: grid;
   grid-template-rows: 2em 2em;
   grid-template-columns: repeat(6, 4em);
}

.box1 {background-color: #FCC; grid-column: 1; grid-row: 1 / 4;}
.box2 {background-color: #FCC; grid-column: 2; grid-row: 3 / span 2;}
.box3 {background-color: #FCC; grid-column: 3; grid-row: span 2 / 3;}
.box4 {background-color: #FCC; grid-column: 4; grid-row: span 2 / 5;}
.box5 {background-color: #FCC; grid-column: 5; grid-row: span 4 / 5;}
.box6 {background-color: #FCC; grid-column: 6; grid-row: -1 / span 3;}
.box7 {background-color: #FCC; grid-column: 7; grid-row: span 3 / -1;} */

/* #grid {display: grid;
   grid-template-rows: [begin] 2em [middle] 2em [end];
   grid-template-columns: repeat(5, 5em);}
.box1 {background-color: #FCC; grid-column: 1; grid-row: 2 / span end 2;}
.box2 {background-color: #FCC; grid-column: 2; grid-row: 2 / span final;}
.box3 {background-color: #FCC; grid-column: 3; grid-row: 1 / span 3 middle;}
.box4 {background-color: #FCC; grid-column: 4; grid-row: span begin 2 / end;}
.box5 {background-color: #FCC; grid-column: 5; grid-row: span 2 middle / begin;} */

/* #grid {display: grid;
   grid-template-rows: 200px 1fr 3em;
   grid-template-columns: 20em 1fr 1fr 10em;
   grid-template-areas:
       "header     header    header    header"
       "leftside   content   content   rightside"
       "leftside   footer    footer    footer";}
#masthead {grid-area: header;}
#sidebar {grid-area: leftside;}
#main {grid-area: content;}
#navbar {grid-area: rightside;}
#footer {grid-area: footer;} */

/*
grid:
    "header header header header" 3em
    ". content sidebar ." 1fr
    "footer footer footer footer" 5em /
    2em 3fr minmax(10em,1fr) 2em;

同等

grid-template-areas:
    "header header header header"
    ". content sidebar ."
    "footer footer footer footer";
grid-template-rows: 3em 1fr 5em;
grid-template-columns: 2em 3fr minmax(10em,1fr) 2em;


auto-fill と auto-fit は非常に似ていますが、1つだけ違う点。
auto-fit では、アイテムが配置されなかったトラックは無くなる。

*/


/* Font */

/*
使用しているフォントがダウンロードに失敗した場合、またはユーザーのブラウザが理解できないファイル形式である場合、
テキストは（最終的には）フォールバックフォントで表示される。

フォントはデザインに不可欠に思えるかもしれませんが、特定のフォントの存在に頼ることはできないことを常に念頭に置く。
フォントの読み込みが遅い場合、ブラウザは通常、テキストのレンダリングを遅らせる。
これにより、ユーザーが読んでいる間にテキストが再描画されることはなくなりますが、ページにテキストがないのはよくない。

汎用フォントはレンダリングスピードが優れている。
フォールバックで使うことを推奨。　

h1 {font-family: Arial, sans-serif;}
h2 {font-family: Arvo, sans-serif;}
p {font-family: 'Times New Roman', serif;}
address {font-family: Chicago, sans-serif;}
.signature {font-family: Author, cursive;}”

*/

/*
フォントファミリーには引用符はつけない。引用符をつけるとブラウザはフォント名を探そうとする。
スペースがある場合は引用符で囲む

独自のフォントを使う場合は@font-faceルールを使って宣言する。
ブラウザはurlからダウンロードし、自身のPCにはいっているかのように振る舞う。
*/
@font-face {
   font-family: "Switzera";
   src: url("SwitzeraADF-Regular.otf");
}

/*
@font-face宣言では、参照されているすべてのフォントファイルが自動的に読み込まれるわけではない。
@font-faceの目的は、font-faceの遅延読み込みを可能にすること。
つまり、ドキュメントのレンダリングに必要なフェイスのみが読み込まれる。
CSSで参照されているフォントファイルは、ページのレンダリングに必要でない場合はダウンロードされない。
フォントファイルは通常キャッシュされ、ユーザーがサイト内を移動しても再ダウンロードされない。

任意のフォントを読み込む機能は非常に強力ですが、次の点に注意。

1. セキュリティ上の理由から、フォントファイルは、それを要求しているページと同じドメインから取得する必要がある。これには解決策がある。
2. フォントのダウンロードを大量に必要とすると、読み込み時間が遅くなる可能性
3. 文字数の多いフォントは、フォント ファイルのサイズを大きくする可能性。

幸い、オンライン ツールとCSSを使用すると、文字セットを制限できる。
フォントの読み込みが遅いと、スタイルが設定されていないテキストや非表示のテキストがちらつくことがある。
CSS には、この問題に対処する方法もある。
*/

/* srcのurlフォールバックを宣言 */
@font-face {
   font-family: "Switzera";
   src: url("SwitzeraADF-Regular.otf"),
        url("https://example.com/fonts/SwitzeraADF-Regular.otf");
}

/*
この場合、前述の同一オリジン ポリシーが一般的に適用されることに注意。
そのため、他のサーバーにあるフォントのコピーを指定すると、そのサーバーがクロスオリジン アクセスを許可するように設定されていない限り、通常は失敗する。

ユーザー エージェントが使用するように指示したフォントの種類を確実に理解するようにするには、オプションですが強く推奨される format() ヒントを使用する:
*/

@font-face {
   font-family: "Switzera";
   src: url("SwitzeraADF-Regular.otf") format("opentype"),
        url("SwitzeraADF-Regular.true") format("truetype");
        /* TrueType font files usually end in '.ttf' */
}


@font-face {
   font-family: "Hiragino"; /* このfont-familyは記述子 */
   src: local("Hiragino Kaku Gothic Pro"),
        local("Hiragino Kaku Gothic Std");
}

/* 以下のfont-familyはプロパティ。記述子で宣言した短い名前が使える。 */
h1, h2, h3 {font-family: Hiragino, sans-serif;}

/*
カスタマイズされたフォントを使用するときは、2つの点に留意する必要があります。
1つ目
   Web ページでフォントを使用する法的権利を持っている必要があること
2つ目
   そうすることが良い考えであるかどうか

ストックフォトと同様に、商用フォントファミリには使用を管理するライセンスが付属しており、すべてのフォントライセンスがWebでの使用を許可しているわけではない。
この質問を完全に回避するには、無料のオープンソースソフトウェア(FOSS)フォントのみを使用するか、
ライセンスと形式変換の問題を自分で処理するGoogle FontsやAdob​​e Fontsなどの商用サービスを使用する。

使用するフォントフェイスの量が増えるとサーバーの負荷が増えるからバランスが大事。

とはいえ、画像最適化ツールが利用できるのと同じように、フォント最適化ツールも利用できる。
通常、これらはサブセット化ツールであり、表示に実際に必要な記号のみを使用してフォントを構築する。
Adobe Fonts や Fonts.com などのサービスを使用している場合は、サブセット化ツールが利用できるか、フォントが要求されたときに動的にサブセット化される。
フォントをサブセット化する場合、Unicode 範囲記述子を使用して、カスタム フォントの使用をフォントファイル内の文字のみに制限できる。
Font Squirrel などのサービスは、フォントをサブセット化し、生成されるCSSスニペットにUnicode範囲を提供します。
ファイル サイズを小さくするには、サブセット化は Unicode 範囲だけでなくフォントファイルで行う必要があることに注意。


範囲を制限する
unicode-range: U+0026;  the Ampersand (&) character 
unicode-range: U+590-5FF;  Hebrew characters 
unicode-range: U+4E00-9FFF, U+FF00-FF9F, U+30??, U+A5;  Japanese
  kanji, hiragana, and katakana, plus the yen/yuan currency symbol


ページ上の 1 つの文字にフォントが必要な場合、フォント全体がダウンロードされる。
使う文字の範囲が決まっているならそれだけのフォントファイルを作成した方が大幅にサイズを小さくできる。
*/

/*
英語やロシア語、数学の記号などが混在したサイトの場合、ブラウザがそのページに必要なファイルだけダウンロードするように分けることができる
*/
@font-face {
   font-family: "MyFont";
   src: url("myfont-general.otf") format("opentype");
}
@font-face {
   font-family: "MyFont";
   src: url("myfont-cyrillic.otf") format("opentype");
   unicode-range: U+04??, U+0500-052F, U+2DE0-2DFF, U+A640-A69F, U+1D2B-1D78;
}
@font-face {
   font-family: "MyFont";
   src: url("myfont-math.otf") format("opentype");
   unicode-range: U+22??;   /* equivalent to U+2200-22FF */
}

body {font-family: MyFont, serif;}

/* 
ページはGoogle翻訳などの自動サービスで翻訳できることを覚えておいておく。
Unicodeの範囲をあまりに厳しく制限すると(たとえば、英語で使用されるアクセントのない文字の範囲に制限すると)、たとえば、ページの自動翻訳バージョンをフランス語やスウェーデン語に翻訳すると、さまざまなフォント フェイスの文字がごちゃ混ぜになる可能性がある。
*/