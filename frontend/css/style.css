/* 
【今回】
・セレクター
基本セレクター
使いどころや使い分けなど


【次回以降】
・グループ化セレクター
・結合子
・ドキュメントツリー（構造）
*/

/*
基本セレクター

【全称セレクター（ユニバーサルセレクター）】
全ての要素型セレクター（タイプセレクター）と一致する */
/* * {
  color: red;
} */

/*【要素型セレクター（タイプセレクター）】
/* h1, p, span, body, button, ...など要素名(ノード名)で指定する */
/* h1 {
  color: red;
}
p { color: red; } */

/* 【クラスセレクター】 */
/* 要素のclass属性を指定する */
/* .title {
  color: red;
} */

/* 【IDセレクター】 */
/* 要素のid属性を指定する */
/* #header {
  color: red;
} */

/* 【属性セレクター】 */
/* 属性が存在するかどうかや、その値に基づいて要素を指定する */
/* a[target="_blank"] {
	color: red;
} */

/* 【疑似表記（疑似クラス、擬似要素）】 */
/* 疑似クラス */
/* a:hover {
  color: red;
} */
/* 疑似要素 */
/* a::after {
  content: '→';
} */

/*
【使いどころ、使い分け】
ユニバーサルセレクター *

1. ブラウザのスタイルを一括でリセットするとき
ブラウザは製作者のスタイルがなくても最低限の見た目を保持するために
スタイルをあてている。
ブラウザごとに微妙に違ったりする。
差分をなくしてスタイルしやすくするためにリセットする。
*/
* {
  margin: 0;
  padding: 0;
}
/*
リセットに関してはreset.cssやnormalize.cssなどを使うことが多い。
*/

/* 2. 全体で共通のスタイルをあてたいとき */
/* 例：formのinput要素にfont-familyを継承させる */
* {
  font-family: inherit;
}

/* 例：背景画像は全要素共通で繰り返さないようにしたい */
* {
  background-repeat: no-repeat;
}
.logo {
  background-image: url('images/logo.png');
}

/* 実装例 */
* {
  margin: 0;
  padding: 0;
  font-family: inherit;
  background-repeat: no-repeat;
}

/*
ユニバーサルセレクターはなぜそのような使われ方をするのか？
他の用途に使ってはいけないのか？
それはなぜか？

【ブラウザーはセレクターを「右から左」に評価する】
具体的にセレクターを指定している部分に使うことはおすすめしない。
*/
/* おすすめしない */
/* .box * {
  color: black;
} */
/* 問題なし */
/* .box .box-item {
  color: black;
} */
/*
ドキュメント内の全ての要素を照合する。
先祖要素に.boxがあるかどうかを「全ての要素に対して」チェックする必要がある。
*/

/* .box * .box-item {
  color: black;
} */
/* 意図していない要素にスタイルが適用されてしまう */
/* .blog * {
  font-size: 1.2rem;
  color: red;
} */
/*
セレクターに*を含むと影響範囲が大きくなる。

具体的にセレクターを指定している部分に使うと基本的に遅くなる
意図していない要素にスタイルが適用されてしまう
という2つの理由からユニバーサルセレクターは

・単体でかつ
・変更されることがないスタイル／前提となるスタイル
などに使うと良さそう。

1. デフォルトのスタイル（ブラウザ）を一括でリセットしたいとき
2. 全体で共通のスタイルをあてたいとき
といった部分で利用される
*/

/* 
【ユニバーサルセレクターに関してよくある話題】
ユニバーサルセレクターはパフォーマンスが低い。
だから使わない方がよいという内容。

これは実際どうなのか？
今のブラウザは速いので影響はごくわずかだと考えて良いと思います。
ブラウザによっては属性セレクターや疑似要素の方が遅かったりする。
（数十ミリ秒ぐらいの差）

セレクターによるパフォーマンスは気にしなくてよい。
※3Dをはじめとしたグラフィックのエフェクト系
※Webサイトの規模が大きい

パフォーマンスに影響が大きい部分
・画像の容量が大きい
・JavaScriptの処理が複雑で重い
・API通信が遅い
などを先に考慮する

スタイルに関してはパフォーマンスより保守性を先に考えた方が良い。
（HTMLのマークアップがおかしいとかCSS設計を全く考えていない）
*/

/*
【IDセレクターとクラスセレクターの使いどころ、使い分け】
スタイルは基本的にクラスセレクター(class属性)を使ってコーディングする。
IDセレクターはできるだけ使わない。

【なぜか？】
観点：CSS設計
1. スタイルが再利用しづらくなるため
特定のマークアップに依存してしまう
id属性は同一ページ内で同名は1つしか使えない。
*/
/* #blog {
  font-size: 1.1rem;
}
.blog {
  font-size: 1.1rem;
} */
/*
2. スタイルが上書きしづらくなるため
むやみに詳細度をあげてしまう
IDセレクターのスタイルの方がクラスセレクターのものより優先される
*/
#blog {
  font-size: 1.5rem;
}
.blog {
  font-size: 2rem !important;
}
/* 無理やり「!important」で上書きするとさらに上書きしづらくなる。 */

/*
HTML要素のid属性を利用する場合

1. ページ内リンクを設定する場合
<a href="#buy">購入へ</a>
↓
<section id="buy">購入はこちらから</section>

2. JavaScriptから利用する場合
<div id="todos">
  ...
</div>
<div id="app">
  ...
</div>


【属性セレクターの使いどころ、使い分け】
特徴
・指定された属性が存在するかどうか
・その値のパターンを指定できる

どこで使うか？
・コンテンツの性質によって細かくスタイルを指定したいとき

例
リンクの種類でスタイルを変えたい
<a href="https://example.com/sample"></a>
<a href="https://example.com/sample.pdf"></a>

/* href属性の値が".pdf"で終わるa要素 */
a[href$=".pdf"] {
  color: red;
}
/*

/* 例２：input要素にスタイルをあてる */
input { padding: 3px; } /* 適用しづらい */

input[type="text"] { padding: 8px; }
input[type="radio"] { padding: 5px; }
input[type="checkbox"] { padding: 6px; }
/*
<input type="text" name="user">
共通のスタイルをあてるclassをマークアップする必要がなくなる

属性セレクターを使うのではなく他の方法を考えてみる
・classを別々に作って割り当てる
<a class="link-normal" href="https://example.com/sample.html">ページ</a>
<a class="link-pdf" href="https://example.com/sample.pdf">ダウンロード</a>
<a class="link-img" href="https://example.com/sample.png">ダウンロード</a>

PHP,Rubyなどでは、class属性を動的に割り当てることはできる。
<a class="条件式 ? 'class-a' : 'class-b'">リンク</a>
<a class="条件式 ? 'class-b' : 'class-c'">リンク</a>
<p class="条件式 ? 'class-d' : 'class-e'">段落</p>
<p class="条件式 ? 'class-f' : 'class-g'">段落</p>

しかし、あまりにスタイルが細かすぎるとHTMLファイルが見辛くなる。
複数のファイルがあるなら、スタイルで一箇所で指定した方がすっきりする。

・:nth-childの疑似クラスを使う
<nav>
    <a href="https://example.com/">ホーム</a>
    <a href="https://example.com/sample.html">ページ</a>
    <a href="https://example.com/sample.pdf">ダウンロード</a>
</nav>

要素の順序を保持しないといけなくなる＝＞変更に弱くなってしまう

・class属性やid属性が連番になっている場合に使うのはどうか？
例
<a class="task-1">タスク1</a>
<a class="task-2">タスク2</a>
<a class="task-3">タスク3</a>
*/
a[class^="task-"] {
  color: red;
}
/*
注意点
意図せずパターンに一致してしまう可能性がある。
<a class="task-1 task--done">タスク3</a>

ルールを決めてCSSとJavaScriptでclass属性を分ける
<a id="app" class="task task--done">
<a class="task js-target">
<a class="todo js-target">
<a class="task __target">

/*
【疑似表記の使いどころや使い分け】
疑似クラスと疑似要素に関しては使いどころや使い分けは特になさそう。
要素の状態（疑似クラス）や特定の部分（疑似要素）は一意。

疑似クラス：マウスでホバーされている状態（:hover)
疑似要素：1行目（::first-line）

※疑似クラスと疑似要素の概要や基本的な使い方については後日解説します。
