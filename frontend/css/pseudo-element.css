/*
疑似クラス/疑似要素

1. ドキュメントの構造以外の情報や、推論が必要なもの
に基づいてスタイルを適用できるセレクター（セレクターに付加するキーワード）


疑似要素
・選択された要素の「特定の部分」を装飾するもの
::first-line
::selection
::before, ::after

::before, ::afterは考え方（捉え方）を変えないと理解が難しい。
*/

/*
CSS
Webページを、装飾する／見た目を変える／見映えを変える
1. 対象自体をいじる
2. 対象に飾り付けを行う

対象 → 僕（ひろポン）
1. ひろポン自体をいじる → ダイエット、筋トレ、髪型を変える
2. ひろポンに飾り付けを行う → 髪飾りをつける、ネックレスをする

対象 → クリスマスツリー
1. ツリー自体をいじる → ツリーの大きさを変える、ツリーの色を変える
2. 星、靴下の飾りをツリーに追加する→装飾

CSS
対象→ボックス（要素）
1. ボックス自体をいじる→margin, padding, border, background, color
2. ボックスに飾り付けをしてる → ::before, ::after

/* 
::before, ::afterの使い所

1. 1つの要素では実現できないスタイル
*/
.heading {
  position: relative;
  display: inline-block;
  padding: 0 55px;
}

.heading::before, .heading::after {
  content: '';
  position: absolute;
  top: 50%;
  display: inline-block;
  width: 45px;
  height: 2px;
  border-top: solid 1px black;
  border-bottom: solid 1px black;
}

.heading::before {
  left:0;
}
.heading::after {
  right: 0;
}

.balloon {
  position: relative;
  background: pink;
  width: 200px;
  padding: 20px;
  border-radius: 10px;
  margin-bottom: 30px;
}

.balloon::before {
  position: absolute;
  content: '';
  border-top: 20px solid pink;
  border-right: 20px solid transparent;
  border-left: 20px solid transparent;
  top: 98%;
}

/* 
空のタグのじゃダメなの？

文書構造と見た目はできるだけ分離する

*/
.link {
  color: darkcyan;
  text-decoration: none;
}

.download-link::after {
  content: "\f019";  /* f381 */
  font-family: "Font Awesome 5 Free";
  font-weight: 900;
  margin-left: 5px;
}

/*

2. 共通部品にして再利用する
例：「テキスト + アイコン」のボタン


*/








/*
3. HTMLを解析するプログラムからするとわかりづらい
検索エンジンのロボット、音声認識、リーダー
↓
文書構造上、意味のない要素を追加しないといけない場合



.icon-link {
  color: red;
}


4. float解除を::afterで行う

*/
